#!/usr/bin/env bash
DATE=$(which date)
GDATE=$(which gdate 2>/dev/null)
if [ -x "$GDATE" ]; then
    DATE=$GDATE
fi

function LOG_INFO {
    >&2 echo "$($DATE +"%F %T.%N") - [INFO ] - $*"
}

if [[ -z "$(which easy)" ]]; then
  LOG_INFO "easy is not installed!"
  exit 1
fi

export EASY_DIR=$(dirname $(realpath $(which easy)))

if [[ ! -d "${EASY_DIR}" ]]; then
  LOG_INFO "EASY_DIR=${EASY_DIR} is not valid!"
  exit 1
fi

function easy_verify_dir {
  if [[ -z "$2" ]]; then
    LOG_INFO "$1 is not set!"
    exit 1
  fi

  if [[ ! -d "$2" ]]; then
    LOG_INFO "$2 does not exist or is not a directory..."
    exit 1
  fi
}

easy_verify_dir EASY_LETSENCRYPT_DIR $EASY_LETSENCRYPT_DIR
easy_verify_dir EASY_DOMAINS_DIR $EASY_DOMAINS_DIR

D="${EASY_DIR}/commands"
function __private_easy_usage {
 LOG_INFO "Invalid command: $1"
 LOG_INFO "Available commands are:"
 cd $D
 for f in *; do
  printf '\t%s\n' "${f%.*}"
 done
}

function easy {
 C="$1"
 # no command provided
 if [[ -z "$C" ]]; then
  __private_easy_usage $C
  return 1
 fi
 # Check if it is a valid command
 C_OK=""
 # Look for ruby implementation first
 C_RB="$D/$C.rb"
 if [[ -f "$C_RB" ]]; then
  C_OK="$C_RB"
    ruby $C_RB $@
    return $?
 fi
 # Look for python impl
 C_PY="$D/$C.py"
 if [[ -f "$C_PY" ]]; then
  C_OK="$C_PY"
    python $C_PY $@
    return $?
 fi
 if [[ -z "$C_OK" ]]; then
  # Look for shell implementation
  C_SH="$D/$C.sh"
  if [[ -f "$C_SH" ]]; then
   C_OK="$C_SH"

   source ${C_SH}

   # Check whether the command
   # exists as an internal
   # function...
   #
   # NOTE: Internal commands use
   # underscores rather than
   # hyphens, hence the name
   # conversion as the first
   # step here.
   C2=$(echo "$C" | tr '-' '_')

   # Execute the requested command
   if [ -n "$C_OK" ]; then
    # It's available as
    # a shell function
    __easy_command_"$C2" $@
    return $?
   fi
  fi
 fi
 # couldn't find the command
 if [[ -z "$C_OK" ]]; then
  __private_easy_usage $C
  return 1
 fi
}

easy $@
